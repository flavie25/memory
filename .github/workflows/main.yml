on:
  push:
    branches:
      - develop

jobs:
  test-memory:
    name: Run test memory
    runs-on: [self-hosted]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Find and run file command on all .jpg files
        run: |
          # Définir le chemin de l'image de remplacement
          REPLACEMENT_IMAGE_PATH="/html/data/poussin.jpeg"

          # Vérifier chaque fichier .jpg
          find . -name '*.jpg' | while read file; do
            echo "Analyzing $file"
            # Exécuter la commande file et vérifier la sortie
            if file "$file" | grep -q "JPEG"; then
              echo "$file is valid."
            else
              echo "$file is corrupt. Replacing with the replacement image."
              cp "$REPLACEMENT_IMAGE_PATH" "$file"  # Remplacer le fichier corrompu
            fi
          done

  build-memory:
    name: Build Docker Image
    runs-on: [self-hosted]
    needs: test-memory

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Print working directory
        run: |
          pwd  # Affiche le répertoire courant
          ls -l  # Liste les fichiers du répertoire courant

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/memory:latest .

  push-memory:
    name: Push Docker Image to Docker Hub
    runs-on: [self-hosted]
    needs: build-memory

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" -p  "${{ secrets.DOCKER_HUB_PASSWORD }}"

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/memory:latest

  deploy-memory:
    name: Deploy to Remote Server
    runs-on: [self-hosted]
    needs: push-memory

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Pull Docker images and start containers
        run: |
          if [ "$(docker ps -q -f name=memory-SSH)" ]; then
            echo "Container 'memory-SSH' is running. Stopping it."
            docker stop memory-SSH
          else
              echo "Container 'memory-SSH' is not running."
          fi

          if [ "$(docker ps -a -q -f name=memory-SSH)" ]; then
              echo "Container 'memory-SSH' exists. Removing it."
              docker rm memory-SSH
          else
              echo "Container 'memory-SSH' does not exist."
          fi

          ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/memory:latest
            docker run -d --name memory-SSH -p 80:80 ${{ secrets.DOCKER_HUB_USERNAME }}/memory:latest
          EOF
